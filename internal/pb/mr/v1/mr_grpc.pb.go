// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: mr/v1/mr.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MergeRequests_GetMergeRequests_FullMethodName = "/mr.v1.MergeRequests/GetMergeRequests"
)

// MergeRequestsClient is the client API for MergeRequests service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MergeRequestsClient interface {
	GetMergeRequests(ctx context.Context, in *GetMergeRequestsRequest, opts ...grpc.CallOption) (*GetMergeRequestsResponse, error)
}

type mergeRequestsClient struct {
	cc grpc.ClientConnInterface
}

func NewMergeRequestsClient(cc grpc.ClientConnInterface) MergeRequestsClient {
	return &mergeRequestsClient{cc}
}

func (c *mergeRequestsClient) GetMergeRequests(ctx context.Context, in *GetMergeRequestsRequest, opts ...grpc.CallOption) (*GetMergeRequestsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMergeRequestsResponse)
	err := c.cc.Invoke(ctx, MergeRequests_GetMergeRequests_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MergeRequestsServer is the server API for MergeRequests service.
// All implementations must embed UnimplementedMergeRequestsServer
// for forward compatibility.
type MergeRequestsServer interface {
	GetMergeRequests(context.Context, *GetMergeRequestsRequest) (*GetMergeRequestsResponse, error)
	mustEmbedUnimplementedMergeRequestsServer()
}

// UnimplementedMergeRequestsServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMergeRequestsServer struct{}

func (UnimplementedMergeRequestsServer) GetMergeRequests(context.Context, *GetMergeRequestsRequest) (*GetMergeRequestsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMergeRequests not implemented")
}
func (UnimplementedMergeRequestsServer) mustEmbedUnimplementedMergeRequestsServer() {}
func (UnimplementedMergeRequestsServer) testEmbeddedByValue()                       {}

// UnsafeMergeRequestsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MergeRequestsServer will
// result in compilation errors.
type UnsafeMergeRequestsServer interface {
	mustEmbedUnimplementedMergeRequestsServer()
}

func RegisterMergeRequestsServer(s grpc.ServiceRegistrar, srv MergeRequestsServer) {
	// If the following call pancis, it indicates UnimplementedMergeRequestsServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MergeRequests_ServiceDesc, srv)
}

func _MergeRequests_GetMergeRequests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMergeRequestsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MergeRequestsServer).GetMergeRequests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MergeRequests_GetMergeRequests_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MergeRequestsServer).GetMergeRequests(ctx, req.(*GetMergeRequestsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MergeRequests_ServiceDesc is the grpc.ServiceDesc for MergeRequests service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MergeRequests_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mr.v1.MergeRequests",
	HandlerType: (*MergeRequestsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMergeRequests",
			Handler:    _MergeRequests_GetMergeRequests_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mr/v1/mr.proto",
}
